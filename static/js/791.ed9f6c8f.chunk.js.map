{"version":3,"file":"static/js/791.ed9f6c8f.chunk.js","mappings":"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","sources":["assets/gifs.jsx","Components/Dialogs/Dialogs.jsx","Components/Dialogs/DialogsContainer.jsx","Components/Hoc/withAuthRedirect.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport gif1 from \"../assets/3a0c9909b542717ce9f651d07c4d4592.gif\";\r\nimport gif2 from \"../assets/b3db578eee7f9c757429a68ca32892fa.gif\";\r\n\r\nimport \"./GifSlider.css\";\r\n\r\nconst gifs = [gif1, gif2];\r\n\r\nconst GifSlider = () => {\r\n    const [current, setCurrent] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setCurrent((prev) => (prev + 1) % gifs.length);\r\n        }, 10000); // каждые 10 секунды\r\n\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"gif-slider\">\r\n            <img src={gifs[current]} alt=\"GIF\" className=\"gif-image\" />\r\n            <p className=\"slider-text\">Раздел в разработке...</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GifSlider;\r\n","import React, { useEffect, useState } from \"react\";\nimport {\n    Box,\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n    Paper,\n    TextField,\n    Button,\n    Typography,\n} from \"@mui/material\";\nimport { Navigate } from \"react-router-dom\";\nimport GifSlider from \"../../assets/gifs\";\n\n\nconst Dialogs = (props) => {\n    const { dialogsPage, fetchMessages, sendMessageThunk, updateNewMessageBody, isAuth } = props;\n    const [selectedUserId, setSelectedUserId] = useState(null);\n\n    const { dialogs, messages, newMessageBody } = dialogsPage;\n\n    useEffect(() => {\n        if (selectedUserId) {\n            fetchMessages(selectedUserId);\n        }\n    }, [selectedUserId]);\n\n    const handleDialogClick = (userId) => {\n        setSelectedUserId(userId);\n    };\n\n    const handleNewMessageChange = (e) => {\n        updateNewMessageBody(e.target.value);\n    };\n\n    const handleSendMessageClick = () => {\n        if (selectedUserId && newMessageBody.trim()) {\n            sendMessageThunk(selectedUserId, newMessageBody);\n        }\n    };\n\n    useEffect(() => {\n        props.fetchDialogs();\n    }, []);\n\n    if (!isAuth) return <Navigate to=\"/login\" />;\n\n    return (\n        <Box sx={{ flexGrow: 1, p: 2 }}>\n            <Grid container spacing={2}>\n                {/* Диалоги */}\n                <Grid item xs={12} md={4}>\n                    <Paper elevation={3} sx={{ p: 2 }}>\n                        <Typography variant=\"h6\" gutterBottom>Диалоги</Typography>\n                        <List>\n                            {dialogs.map((d) => (\n                                <ListItem\n                                    key={d.id}\n                                    button\n                                    selected={d.id === selectedUserId}\n                                    onClick={() => handleDialogClick(d.id)}\n                                >\n                                    <ListItemText primary={d.name} />\n                                </ListItem>\n                            ))}\n                        </List>\n                    </Paper>\n                </Grid>\n\n                {/* Сообщения */}\n                <Grid item xs={12} md={8}>\n                    <Paper elevation={3} sx={{ p: 2, height: \"100%\" }}>\n\n                        <Box sx={{ mb: 2 }}>\n                            <GifSlider />\n                        </Box>\n\n                        <Typography variant=\"h6\" gutterBottom>Сообщения</Typography>\n                        <Box\n                            sx={{\n                                maxHeight: 400,\n                                overflowY: \"auto\",\n                                mb: 2,\n                                display: \"flex\",\n                                flexDirection: \"column\",\n                                gap: 1,\n                            }}\n                        >\n                            {messages.map((m) => (\n                                <Paper key={m.id} sx={{ p: 1.5, bgcolor: \"#f5f5f5\" }}>\n                                    <Typography variant=\"body1\">{m.body || m.message}</Typography>\n                                </Paper>\n                            ))}\n                        </Box>\n\n                        {/* Форма отправки */}\n                        <Box sx={{ display: \"flex\", gap: 1 }}>\n                            <TextField\n                                fullWidth\n                                label=\"Введите сообщение\"\n                                value={newMessageBody}\n                                onChange={handleNewMessageChange}\n                                variant=\"outlined\"\n                                size=\"small\"\n                            />\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={handleSendMessageClick}\n                            >\n                                Отправить\n                            </Button>\n                        </Box>\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default Dialogs;\n","import { connect } from \"react-redux\";\nimport Dialogs from \"./Dialogs\";\nimport { compose } from \"redux\";\nimport { AuthRedirectComponent } from \"../Hoc/withAuthRedirect\";\nimport {\n    fetchDialogs,\n    fetchMessages,\n    sendMessageThunk,\n    updateNewMessageBodyCreator\n} from \"../../redux/dialog-reducer\";\n\nconst mapStateToProps = (state) => ({\n    dialogsPage: state.dialogsPage,\n    isAuth: state.auth.isAuth\n});\n\nconst mapDispatchToProps = {\n    updateNewMessageBody: updateNewMessageBodyCreator,\n    fetchMessages,\n    sendMessageThunk,\n    fetchDialogs\n};\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    AuthRedirectComponent\n)(Dialogs);\n","import React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\n\nconst mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth,\n});\n\nexport const AuthRedirectComponent = (WrappedComponent) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Navigate to=\"/login\" />;\n            return <WrappedComponent {...this.props} />;\n        }\n    }\n\n    return compose(connect(mapStateToPropsForRedirect))(RedirectComponent);\n};\n"],"names":["gifs","gif1","gif2","GifSlider","current","setCurrent","useState","useEffect","interval","setInterval","prev","length","clearInterval","_jsxs","className","children","_jsx","src","alt","props","dialogsPage","fetchMessages","sendMessageThunk","updateNewMessageBody","isAuth","selectedUserId","setSelectedUserId","dialogs","messages","newMessageBody","fetchDialogs","Box","sx","flexGrow","p","Grid","container","spacing","item","xs","md","Paper","elevation","Typography","variant","gutterBottom","List","map","d","ListItem","button","selected","id","onClick","handleDialogClick","userId","ListItemText","primary","name","height","mb","maxHeight","overflowY","display","flexDirection","gap","m","bgcolor","body","message","TextField","fullWidth","label","value","onChange","e","target","size","Button","color","handleSendMessageClick","trim","Navigate","to","mapDispatchToProps","updateNewMessageBodyCreator","compose","connect","state","auth","AuthRedirectComponent","Dialogs","mapStateToPropsForRedirect","WrappedComponent","RedirectComponent","React","render","this"],"sourceRoot":""}
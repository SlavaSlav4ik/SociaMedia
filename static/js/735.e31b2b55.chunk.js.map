{"version":3,"file":"static/js/735.e31b2b55.chunk.js","mappings":"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","sources":["Components/Profiile/ProfileInfo/ProfileStatus.jsx","Components/Profiile/ProfileDataForm.jsx","Components/Profiile/ProfileInfo/ProfileInfo.jsx","Components/Profiile/MyPosts/Post/Post.jsx","Components/Profiile/MyPosts/MyPostContainer.jsx","Components/Profiile/MyPosts/myPost.jsx","Components/Profiile/FriendsList.jsx","Components/Profiile/Profile.jsx","Components/Profiile/ProfileContainer.jsx","Components/Hoc/withAuthRedirect.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { TextField, Typography } from \"@mui/material\";\n\nconst ProfileStatus = ({ status: propStatus, updateStatus }) => {\n    const [editMode, setEditMode] = useState(false);\n    const [status, setStatus] = useState(propStatus);\n\n    useEffect(() => {\n        setStatus(propStatus);\n    }, [propStatus]);\n\n    const activateEditMode = () => setEditMode(true);\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        updateStatus(status);\n    };\n\n    return (\n        <div>\n            {!editMode ? (\n                <Typography onDoubleClick={activateEditMode} sx={{ cursor: \"pointer\" }}>\n                    <b>Status:</b> {propStatus || \"No status\"}\n                </Typography>\n            ) : (\n                <TextField\n                    autoFocus\n                    value={status}\n                    onChange={(e) => setStatus(e.target.value)}\n                    onBlur={deactivateEditMode}\n                    variant=\"standard\"\n                    fullWidth\n                />\n            )}\n        </div>\n    );\n};\n\nexport default ProfileStatus;\n","import React from 'react';\nimport { Formik, Form } from 'formik';\nimport {\n    TextField,\n    Checkbox,\n    FormControlLabel,\nButton,\n    Typography,\n    Stack,\n    Accordion,\n    AccordionSummary,\n    AccordionDetails\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\n\nconst ProfileDataForm = ({ profile, onSubmit }) => {\n    const initialValues = {\n        fullName: profile.fullName || '',\n        lookingForAJob: profile.lookingForAJob || false,\n        lookingForAJobDescription: profile.lookingForAJobDescription || '',\n        aboutMe: profile.aboutMe || '',\n        contacts: profile.contacts || {}\n    };\n\n    return (\n        <Formik enableReinitialize initialValues={initialValues} onSubmit={onSubmit}>\n            {({ values, handleChange }) => (\n                <Form>\n                    <Stack spacing={3}>\n                        <Typography variant=\"h6\">Edit Profile</Typography>\n                        <TextField name=\"fullName\" label=\"Full Name\" value={values.fullName} onChange={handleChange} fullWidth />\n                        <FormControlLabel\n                            control={<Checkbox name=\"lookingForAJob\" checked={values.lookingForAJob} onChange={handleChange} />}\n                            label=\"Looking for a job\"\n                        />\n                        {values.lookingForAJob && (\n                            <TextField\n                                name=\"lookingForAJobDescription\"\n                                label=\"Professional skills\"\n                                value={values.lookingForAJobDescription}\n                                onChange={handleChange}\n                                fullWidth\n                            />\n                        )}\n                        <TextField name=\"aboutMe\" label=\"About me\" value={values.aboutMe} onChange={handleChange} fullWidth />\n                        <Accordion>\n                            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                                <Typography><b>Contacts</b></Typography>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <Stack spacing={2}>\n                                    {Object.keys(profile.contacts).map(key => (\n                                        <TextField\n                                            key={key}\n                                            name={`contacts.${key}`}\n                                            label={key.charAt(0).toUpperCase() + key.slice(1)}\n                                            value={values.contacts[key] || ''}\n                                            onChange={handleChange}\n                                            fullWidth\n                                        />\n                                    ))}\n                                </Stack>\n                            </AccordionDetails>\n                        </Accordion>\n                        <Button type=\"submit\" variant=\"contained\">Save</Button>\n                    </Stack>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default ProfileDataForm;","import React, { useState } from \"react\";\nimport {\n    Avatar,\n    Button,\n    Typography,\n    Box,\n    Stack,\n    Card,\n    CardContent,\n    Divider,\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n} from \"@mui/material\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport ProfileStatus from \"./ProfileStatus\";\nimport ProfileDataForm from \"../ProfileDataForm\";\nimport userPhoto from \"../../../assets/images/47d45103406b3b1a2a873981694e844b.jpg\";\n\nconst ProfileInfo = (props) => {\n    const [editMode, setEditMode] = useState(false);\n\n    const onMainPhotoSelected = (e) => {\n        if (e.target.files.length) {\n            props.savePhoto(e.target.files[0]);\n        }\n    };\n\n    const onSubmit = (formData) => {\n        props.saveProfile(formData).then(() => {\n            setEditMode(false);\n        });\n    };\n\n    if (!props.profile) return <Typography>Loading...</Typography>;\n\n    return (\n        <Card sx={{ marginTop: 2 }}>\n            <CardContent>\n                <Stack direction={{ xs: \"column\", sm: \"row\" }} spacing={3}>\n                    <Avatar\n                        src={props.profile.photos.large || userPhoto}\n                        alt=\"User\"\n                        sx={{ width: 120, height: 120 }}\n                    />\n                    <Box>\n                        {props.isOwner && (\n                            <Button variant=\"outlined\" component=\"label\">\n                                Upload Photo\n                                <input type=\"file\" hidden onChange={onMainPhotoSelected} />\n                            </Button>\n                        )}\n\n                        <Box mt={2}>\n                            <ProfileStatus\n                                status={props.status}\n                                updateStatus={props.updateStatus}\n                            />\n                        </Box>\n                    </Box>\n                </Stack>\n\n                <Divider sx={{ my: 2 }} />\n\n                {editMode ? (\n                    <ProfileDataForm profile={props.profile} onSubmit={onSubmit} />\n                ) : (\n                    <ProfileData\n                        profile={props.profile}\n                        isOwner={props.isOwner}\n                        goToEditMode={() => setEditMode(true)}\n                    />\n                )}\n            </CardContent>\n        </Card>\n    );\n};\n\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\n    const hasContacts = Object.values(profile.contacts).some((value) => value);\n\n    return (\n        <Stack spacing={2}>\n            {isOwner && (\n                <Button variant=\"contained\" onClick={goToEditMode}>\n                    Edit Profile\n                </Button>\n            )}\n\n            <Typography><b>Full name:</b> {profile.fullName}</Typography>\n\n            <Typography>\n                <b>Looking for a job:</b> {profile.lookingForAJob ? \"Yes\" : \"No\"}\n            </Typography>\n\n            {profile.lookingForAJob && profile.lookingForAJobDescription && (\n                <Typography>\n                    <b>Professional skills:</b> {profile.lookingForAJobDescription}\n                </Typography>\n            )}\n\n            {profile.aboutMe && (\n                <Typography>\n                    <b>About me:</b> {profile.aboutMe}\n                </Typography>\n            )}\n\n            {hasContacts && (\n                <Accordion>\n                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography><b>Contacts</b></Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <Stack spacing={1}>\n                            {Object.entries(profile.contacts).map(([key, value]) =>\n                                value ? (\n                                    <Box key={key}>\n                                        <Typography>\n                                            <b>{capitalize(key)}:</b>{\" \"}\n                                            <a href={value} target=\"_blank\" rel=\"noreferrer\" style={{ color: \"#1976d2\" }}>\n                                                {value}\n                                            </a>\n                                        </Typography>\n                                    </Box>\n                                ) : null\n                            )}\n                        </Stack>\n                    </AccordionDetails>\n                </Accordion>\n            )}\n        </Stack>\n    );\n};\n\nconst capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nexport default ProfileInfo;\n","import React from 'react';\nimport {\n    Card,\n    CardContent,\n    Typography,\n    IconButton,\n    Stack,\n    Avatar\n} from '@mui/material';\nimport ThumbUpIcon from '@mui/icons-material/ThumbUp';\nimport ThumbDownIcon from '@mui/icons-material/ThumbDown';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nexport default function Post({\n                                 message,\n                                 likesCount,\n                                 dislikesCount,\n                                 vote,\n                                 onLike,\n                                 onDislike,\n                                 onDelete\n                             }) {\n    return (\n        <Card sx={{ mb:2, bgcolor:'#e3f2fd' }}>\n            <CardContent>\n                <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n                    <Avatar />\n                    <Typography>{message}</Typography>\n                    <IconButton onClick={onDelete} sx={{ ml:'auto' }}><DeleteIcon /></IconButton>\n                </Stack>\n                <Stack direction=\"row\" spacing={1} mt={2} alignItems=\"center\">\n                    <IconButton onClick={onLike} color={vote==='like'?'primary':'default'}>\n                        <ThumbUpIcon />\n                    </IconButton>\n                    <Typography>{likesCount}</Typography>\n                    <IconButton onClick={onDislike} color={vote==='dislike'?'error':'default'}>\n                        <ThumbDownIcon />\n                    </IconButton>\n                    <Typography>{dislikesCount}</Typography>\n                </Stack>\n            </CardContent>\n        </Card>\n    );\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport {\n    addPost,\n    updateNewPostText,\n    deletePost,\n    toggleLike,\n    toggleDislike\n} from '../../../redux/profile-reducer';\nimport MyPosts from \"./myPost\";\n\nconst mapState = state => ({\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText\n});\nconst mapDispatch = {\n    addPost,\n    updateNewPostText,\n    deletePost,\n    toggleLike,\n    toggleDislike\n};\n\nexport default connect(mapState, mapDispatch)(MyPosts);\n","import React, { useRef } from 'react';\nimport {\n    Box,\n    TextField,\n    Button,\n    Stack,\n    Dialog,\n    DialogTitle,\n    DialogActions\n} from '@mui/material';\nimport Post from \"./Post/Post\";\n\n\nexport default function MyPosts({\n                                    posts,\n                                    newPostText,\n                                    addPost,\n                                    updateNewPostText,\n                                    deletePost,\n                                    toggleLike,\n                                    toggleDislike\n                                }) {\n    const ref = useRef();\n    const [confirmOpen, setConfirmOpen] = React.useState(false);\n    const [toDeleteId, setToDeleteId] = React.useState(null);\n\n    const handleDeleteClick = id => {\n        setToDeleteId(id);\n        setConfirmOpen(true);\n    };\n    const handleConfirm = () => {\n        deletePost(toDeleteId);\n        setConfirmOpen(false);\n    };\n    const handleCancel = () => setConfirmOpen(false);\n\n    return (\n        <Box sx={{ p:2, bgcolor:'#bbdefb', borderRadius:2, mb:4 }}>\n            <Stack spacing={2}>\n                <TextField\n                    multiline\n                    rows={3}\n                    inputRef={ref}\n                    value={newPostText}\n                    onChange={e => updateNewPostText(e.target.value)}\n                    label=\"What's on your mind?\"\n                    fullWidth\n                />\n                <Button variant=\"contained\" onClick={addPost}>Add Post</Button>\n                {posts.map(p => (\n                    <Post\n                        key={p.id}\n                        {...p}\n                        onLike={() => toggleLike(p.id)}\n                        onDislike={() => toggleDislike(p.id)}\n                        onDelete={() => handleDeleteClick(p.id)}\n                    />\n                ))}\n            </Stack>\n\n            {/* Диалог подтверждения */}\n            <Dialog open={confirmOpen} onClose={handleCancel}>\n                <DialogTitle>Удалить этот пост?</DialogTitle>\n                <DialogActions>\n                    <Button onClick={handleCancel}>Отмена</Button>\n                    <Button onClick={handleConfirm} color=\"error\">Удалить</Button>\n                </DialogActions>\n            </Dialog>\n        </Box>\n    );\n}\n","// src/Components/FriendsList/FriendsList.jsx\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { getFriends } from '../../redux/friends-reducer';\nimport { Avatar, List, ListItem, ListItemAvatar, ListItemText, Typography, Box } from '@mui/material';\nimport { NavLink } from 'react-router-dom';\n\nfunction FriendsList({ friends, getFriends }) {\n    useEffect(() => {\n        getFriends();\n    }, [getFriends]);\n\n    return (\n        <Box sx={{ p: 2, bgcolor: '#f3e5f5', borderRadius: 2 }}>\n            <Typography variant=\"h6\" mb={1}>Friends</Typography>\n            <List>\n                {friends.map(f => (\n                    <ListItem key={f.id}>\n                        <ListItemAvatar>\n                            <NavLink to={`/profile/${f.id}`} style={{ textDecoration: 'none' }}>\n                                <Avatar src={f.photos?.small || ''} sx={{ cursor: 'pointer' }} />\n                            </NavLink>\n                        </ListItemAvatar>\n                        <ListItemText\n                            primary={\n                                <NavLink\n                                    to={`/profile/${f.id}`}\n                                    style={{ textDecoration: 'none', color: 'inherit', fontWeight: 500 }}\n                                >\n                                    {f.name}\n                                </NavLink>\n                            }\n                        />\n                    </ListItem>\n                ))}\n            </List>\n        </Box>\n    );\n}\n\nconst mapState = state => ({\n    friends: state.friendsPage.friends\n});\n\nexport default connect(mapState, { getFriends })(FriendsList);\n","import React from \"react\";\nimport { Grid } from \"@mui/material\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostContainer from \"./MyPosts/MyPostContainer\";\nimport FriendsList from \"./FriendsList\";\nimport Preloader from \"../Common/Preloader/Preloader\";\nimport './Profile.css';\n\nconst Profile = (props) => {\n    if (!props.profile) {\n        return <Preloader />;\n    }\n\n    return (\n        <Grid container spacing={2} className=\"profile-grid\">\n            <Grid item xs={12}>\n                <ProfileInfo\n                    profile={props.profile}\n                    status={props.status}\n                    updateStatus={props.updateStatus}\n                    isOwner={props.isOwner}\n                    savePhoto={props.savePhoto}\n                    saveProfile={props.saveProfile}\n                />\n            </Grid>\n\n            <Grid item className=\"my-posts-item\">\n                <MyPostContainer />\n            </Grid>\n\n            <Grid item className=\"friends-item\">\n                <FriendsList friends={props.friends} />\n            </Grid>\n        </Grid>\n\n    );\n};\n\nexport default Profile;\n\n\n\n/* <Profile>                      // src/Components/Profile/Profile.jsx\n├── <ProfileInfo>              // аватар, кнопка Upload, статус, данные профиля/форма\n│   ├── <Avatar + UploadBtn>\n│   ├── <ProfileStatus>\n│   └── <ProfileData or ProfileDataForm>\n│       └── (Accordion контакты)\n├── <MyPostsContainer>         // форма добавления + список постов\n│   └── <MyPosts>\n│       ├── <TextField + Button>\n│       └── [<Post> …]\n│           └── пост-карточка (аватар, текст, кнопки)\n└── <FriendsList>              // боковой список друзей\n    └── [<ListItem> …]\n*/","import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getUsersProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profile-reducer';\nimport Profile from './Profile';\nimport {AuthRedirectComponent} from \"../Hoc/withAuthRedirect\";\n\nconst ProfileContainer = props => {\n    const { userId: paramId } = useParams();\n    const userId = paramId || props.authedUserId;\n\n    useEffect(() => {\n        props.getUsersProfile(userId);\n        props.getStatus(userId);\n    }, [paramId]);\n\n    return (\n        <Profile\n            {...props}\n            profile={props.profile}\n            status={props.status}\n            updateStatus={props.updateStatus}\n            isOwner={!paramId}\n            savePhoto={props.savePhoto}\n            saveProfile={props.saveProfile}\n        />\n    );\n};\n\nconst mapState = state => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authedUserId: state.auth.id\n});\n\nexport default connect(mapState, { getUsersProfile, getStatus, updateStatus, savePhoto, saveProfile })(\n    AuthRedirectComponent(ProfileContainer)\n);","import React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\n\nconst mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth,\n});\n\nexport const AuthRedirectComponent = (WrappedComponent) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Navigate to=\"/login\" />;\n            return <WrappedComponent {...this.props} />;\n        }\n    }\n\n    return compose(connect(mapStateToPropsForRedirect))(RedirectComponent);\n};\n"],"names":["_ref","status","propStatus","updateStatus","editMode","setEditMode","useState","setStatus","useEffect","_jsx","children","TextField","autoFocus","value","onChange","e","target","onBlur","deactivateEditMode","variant","fullWidth","_jsxs","Typography","onDoubleClick","activateEditMode","sx","cursor","profile","onSubmit","initialValues","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","Formik","enableReinitialize","_ref2","values","handleChange","Form","Stack","spacing","name","label","FormControlLabel","control","Checkbox","checked","Accordion","AccordionSummary","expandIcon","ExpandMoreIcon","AccordionDetails","Object","keys","map","key","charAt","toUpperCase","slice","Button","type","ProfileData","isOwner","goToEditMode","hasContacts","some","onClick","entries","Box","capitalize","href","rel","style","color","str","props","Card","marginTop","CardContent","direction","xs","sm","Avatar","src","photos","large","userPhoto","alt","width","height","component","hidden","files","length","savePhoto","mt","ProfileStatus","Divider","my","ProfileDataForm","formData","saveProfile","then","Post","message","likesCount","dislikesCount","vote","onLike","onDislike","onDelete","mb","bgcolor","alignItems","IconButton","ml","DeleteIcon","ThumbUpIcon","ThumbDownIcon","mapDispatch","addPost","updateNewPostText","deletePost","toggleLike","toggleDislike","connect","state","posts","profilePage","newPostText","ref","useRef","confirmOpen","setConfirmOpen","React","toDeleteId","setToDeleteId","handleCancel","p","borderRadius","multiline","rows","inputRef","id","handleDeleteClick","Dialog","open","onClose","DialogTitle","DialogActions","handleConfirm","friends","friendsPage","getFriends","List","f","_f$photos","ListItem","ListItemAvatar","NavLink","to","textDecoration","small","ListItemText","primary","fontWeight","Grid","container","className","item","ProfileInfo","MyPostContainer","FriendsList","Preloader","authedUserId","auth","getUsersProfile","getStatus","AuthRedirectComponent","userId","paramId","useParams","Profile","mapStateToPropsForRedirect","isAuth","WrappedComponent","RedirectComponent","render","this","Navigate","compose"],"sourceRoot":""}
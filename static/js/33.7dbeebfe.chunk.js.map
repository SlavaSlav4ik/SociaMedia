{"version":3,"file":"static/js/33.7dbeebfe.chunk.js","mappings":"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","sources":["Components/Dialogs/Dialogs.jsx","Components/Dialogs/DialogsContainer.jsx","Components/Hoc/withAuthRedirect.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n    Box,\n    Grid,\n    List,\n    ListItem,\n    ListItemText,\n    Paper,\n    TextField,\n    Button,\n    Typography,\n} from \"@mui/material\";\nimport { Navigate } from \"react-router-dom\";\n\nconst Dialogs = (props) => {\n    const { dialogsPage, fetchMessages, sendMessageThunk, updateNewMessageBody, isAuth } = props;\n    const [selectedUserId, setSelectedUserId] = useState(null);\n\n    const { dialogs, messages, newMessageBody } = dialogsPage;\n\n    useEffect(() => {\n        if (selectedUserId) {\n            fetchMessages(selectedUserId);\n        }\n    }, [selectedUserId]);\n\n    const handleDialogClick = (userId) => {\n        setSelectedUserId(userId);\n    };\n\n    const handleNewMessageChange = (e) => {\n        updateNewMessageBody(e.target.value);\n    };\n\n    const handleSendMessageClick = () => {\n        if (selectedUserId && newMessageBody.trim()) {\n            sendMessageThunk(selectedUserId, newMessageBody);\n        }\n    };\n\n    useEffect(() => {\n        props.fetchDialogs();\n    }, []);\n\n    if (!isAuth) return <Navigate to=\"/login\" />;\n\n    return (\n        <Box sx={{ flexGrow: 1, p: 2 }}>\n            <Grid container spacing={2}>\n                {/* Диалоги */}\n                <Grid item xs={12} md={4}>\n                    <Paper elevation={3} sx={{ p: 2 }}>\n                        <Typography variant=\"h6\" gutterBottom>Диалоги</Typography>\n                        <List>\n                            {dialogs.map((d) => (\n                                <ListItem\n                                    key={d.id}\n                                    button\n                                    selected={d.id === selectedUserId}\n                                    onClick={() => handleDialogClick(d.id)}\n                                >\n                                    <ListItemText primary={d.name} />\n                                </ListItem>\n                            ))}\n                        </List>\n                    </Paper>\n                </Grid>\n\n                {/* Сообщения */}\n                <Grid item xs={12} md={8}>\n                    <Paper elevation={3} sx={{ p: 2, height: \"100%\" }}>\n                        <Typography variant=\"h6\" gutterBottom>Сообщения</Typography>\n                        <Box\n                            sx={{\n                                maxHeight: 400,\n                                overflowY: \"auto\",\n                                mb: 2,\n                                display: \"flex\",\n                                flexDirection: \"column\",\n                                gap: 1,\n                            }}\n                        >\n                            {messages.map((m) => (\n                                <Paper key={m.id} sx={{ p: 1.5, bgcolor: \"#f5f5f5\" }}>\n                                    <Typography variant=\"body1\">{m.body || m.message}</Typography>\n                                </Paper>\n                            ))}\n                        </Box>\n\n                        {/* Форма отправки */}\n                        <Box sx={{ display: \"flex\", gap: 1 }}>\n                            <TextField\n                                fullWidth\n                                label=\"Введите сообщение\"\n                                value={newMessageBody}\n                                onChange={handleNewMessageChange}\n                                variant=\"outlined\"\n                                size=\"small\"\n                            />\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={handleSendMessageClick}\n                            >\n                                Отправить\n                            </Button>\n                        </Box>\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n};\n\nexport default Dialogs;\n","import { connect } from \"react-redux\";\nimport Dialogs from \"./Dialogs\";\nimport { compose } from \"redux\";\nimport { AuthRedirectComponent } from \"../Hoc/withAuthRedirect\";\nimport {\n    fetchDialogs,\n    fetchMessages,\n    sendMessageThunk,\n    updateNewMessageBodyCreator\n} from \"../../redux/dialog-reducer\";\n\nconst mapStateToProps = (state) => ({\n    dialogsPage: state.dialogsPage,\n    isAuth: state.auth.isAuth\n});\n\nconst mapDispatchToProps = {\n    updateNewMessageBody: updateNewMessageBodyCreator,\n    fetchMessages,\n    sendMessageThunk,\n    fetchDialogs\n};\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    AuthRedirectComponent\n)(Dialogs);\n","import React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\n\nconst mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth,\n});\n\nexport const AuthRedirectComponent = (WrappedComponent) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Navigate to=\"/login\" />;\n            return <WrappedComponent {...this.props} />;\n        }\n    }\n\n    return compose(connect(mapStateToPropsForRedirect))(RedirectComponent);\n};\n"],"names":["props","dialogsPage","fetchMessages","sendMessageThunk","updateNewMessageBody","isAuth","selectedUserId","setSelectedUserId","useState","dialogs","messages","newMessageBody","useEffect","fetchDialogs","_jsx","Box","sx","flexGrow","p","children","_jsxs","Grid","container","spacing","item","xs","md","Paper","elevation","Typography","variant","gutterBottom","List","map","d","ListItem","button","selected","id","onClick","handleDialogClick","userId","ListItemText","primary","name","height","maxHeight","overflowY","mb","display","flexDirection","gap","m","bgcolor","body","message","TextField","fullWidth","label","value","onChange","e","target","size","Button","color","handleSendMessageClick","trim","Navigate","to","mapDispatchToProps","updateNewMessageBodyCreator","compose","connect","state","auth","AuthRedirectComponent","Dialogs","mapStateToPropsForRedirect","WrappedComponent","RedirectComponent","React","render","this"],"sourceRoot":""}